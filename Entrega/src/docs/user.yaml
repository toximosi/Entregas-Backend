components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjetId
          description: Id autogeneration of Mongo
        first_name:
          type: String
        last_name:
          type: String
        password:
          type: String
        email:
          type: String
        age:
          type: Number
        role:
          type: String
          enum: user, admin
          default: user
        phone:
          type: String
        address:
          type: String
        image:
          type: String
        cart:
          type: mongoose.SchemaTypes.ObjectId

      example:
        _id: ObjectId('63a9dce0d968311089ad0a85')
        first_name: admin
        last_name: admin
        password: $2b$10$Y3.qZFFko9wpc3djHvxL4uVKMdTRG7cOUo3p7yTcFmq3qEAekwot.
        email: test@mail.es
        age: 0
        role: admin
        phone: 0000000
        address: Calle Final 00
        image: /images/1672082567095-avatar.png
        cart: 63a9dce0d968311089ad0a83
        created_at: 2022-12-26T17:41:52.951Z
        updated_at: 2022-12-27T16:14:43.530Z
        __v: 0
  requestBodies:
    newUser:
      type: objet
      properties:
        first_name:
          type: String
        last_name:
          type: String
        password:
          type: String
          description: password without hashear
        email:
          type: String
          description: unique email
        age:
          type: Number
        role:
          type: String
          enum: user, admin
          default: user
        phone:
          type: String
        address:
          type: String
        image:
          type: String
      example:
        first_name: Juan,
        last_name: Francisco Carro-Casal,
        password: 1234,
        email: 03@mail.com,
        age: 3,
        role: user,
        phone: 00000003,
        address: Calle Final 03,
        image: avatar.png
paths:
  /api/user/:
    get:
      summary: get all user of bd
      tags:
        - Users
      responses:
        200:
          description: get users ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/user/byId/{id}:
    get:
      summary: Returns a user by id.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User id from store.
          example: 63a9dce0d968311089ad0a85
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of user information.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: user not found in database  
  /api/user/byEmail/{email}:
    get:
      summary: Returns a user by email.
      tags:
        - Users
      parameters:
        - name: email
          in: path
          required: true
          description: User email from store.
          example: test@mail.es
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of user information.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: user not found in database 
  /api/user/Info/ById/{id}:
    get:
      summary: Returns a user by id with populate cart and product (not history buy).
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User email from store.
          example: 63a9dce0d968311089ad0a85
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of user information.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: user not found in database             
  /api/user/save:
    post:
      summary: Create new user
      tags: 
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/requestBodies/newUser'
      responses:
        '200':
          description: get users ok
        '400':
          description:   filed in get users, invalid data
        '500':
          description: get users ok
  /api/user/delete/byId/{id}:
    delete:
      summary: Elimina un usuario dado
      tags:
        - Users
      parameters:
      - name: id
        in: path
        required: true
        description: delete user by Mongo id
        example: 63a9eb7758cab743d2352020
        schema:
          type: string





